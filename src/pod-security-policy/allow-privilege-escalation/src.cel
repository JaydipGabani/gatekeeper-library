variables:
- name: containers
  expression: 'has(object.spec.containers) ? object.spec.containers : []'
- name: initContainers
  expression: 'has(object.spec.initContainers) ? object.spec.initContainers : []'
- name: ephemeralContainers
  expression: 'has(object.spec.ephemeralContainers) ? object.spec.ephemeralContainers : []'
- name: exemptImages
  expression: |
    !has(variables.params.exemptImages) ? [] :
    (variables.containers + variables.initContainers + variables.ephemeralContainers).filter(container,
        // we can use the regex substitution because docker images do not allow "." as a valid character
        variables.params.exemptImages.exists(exemption, container.image == exemption || (exemption.endsWith("*") && string(container.image).matches("^" + string(variables.params.exemptImages).replace("*", ".*") + "$")))
    )
- name: badContainers
  expression: |
    (variables.containers + variables.initContainers + variables.ephemeralContainers).filter(container,
    !(container.image in variables.exemptImages) && (
        !has(container.securityContext) ||
        !has(container.securityContext.allowPrivilegeEscalation) ||
        container.securityContext.allowPrivilegeEscalation != false
    )
    )
validations:
- expression: '(has(request.operation) && request.operation == "UPDATE") || size(variables.badContainers) == 0'
  messageExpression: '"Privilege escalation container is not allowed: " + variables.badContainers.map(c, c.image).join(", ")'
