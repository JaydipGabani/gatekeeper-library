variables:
- name: containers
  expression: 'has(variables.anyObject.spec.containers) ? variables.anyObject.spec.containers : []'
- name: initContainers
  expression: 'has(variables.anyObject.spec.initContainers) ? variables.anyObject.spec.initContainers : []'
- name: ephemeralContainers
  expression: 'has(variables.anyObject.spec.ephemeralContainers) ? variables.anyObject.spec.ephemeralContainers : []'
- name: allContainers
  expression: 'variables.containers + variables.initContainers + variables.ephemeralContainers'
- name: allowedHostPaths
  expression: |
    has(variables.params) ? (has(variables.params.allowedHostPaths) ? variables.params.allowedHostPaths : []) : []
- name: volumes
  expression: |
    variables.anyObject.spec.volumes.filter(volume, has(volume.hostPath))
- name: badHostPaths
  expression: |
    variables.volumes.filter(volume, 
      (size(variables.allowedHostPaths) == 0) ||
      !(variables.allowedHostPaths.exists(allowedHostPath, 
          volume.hostPath.path.startsWith(allowedHostPath.pathPrefix) && (
          !(allowedHostPath.readOnly == true) ||
            (allowedHostPath.readOnly && !variables.allContainers.exists(c, 
            c.volumeMounts.exists(m, m.name == volume.name && !m.readOnly))))))
    ).map(volume, "{ hostPath: { path : " + volume.hostPath.path + " }, name: " + volume.name + "}").map(volume, "HostPath volume " + volume + " is not allowed, pod: " + variables.anyObject.metadata.name + ". Allowed path: " + variables.allowedHostPaths.map(path, "{ pathPrefix: " + path.pathPrefix + ", readOnly: " + path.readOnly + "}").join(", "))
validations:
- expression: '(has(request.operation) && request.operation == "UPDATE") || size(variables.badHostPaths) == 0'
  messageExpression: 'variables.badHostPaths.join("\n")'

    